waitTime      		= -60
dataFactoryFile 	= 'ETLDemoTbl/datafactory.json'
sqoopFile       	= 'ETLDemoTbl/sqoop.json'
configFile      	= 'ETLDemoTbl/config.ini'
tableLoaderFile  	= 'ETLDemoTbl/table_loader.json'
keyFilePath 	    = '/var/lib/jenkins/keyfile.json'
channel 			= '#ora_sqoop_test'
projectId           = 'gcp-chain'
GCPdataset          = 'ETL_TBL_STG'

lcp 				= env.GLOBAL_LCP.toLowerCase()
gitRepo             = "https://github.com/chrajeshdagur/ETLJenkinPipelineDemo.git"
gitBranch 			= 'main'
email_recipients 	= "yourname@gmail.com"
retry_nbr			= 1



def notifyFailed() {
  slackSend (channel: channel, color: '#FF0000', message: " ${lcp}  FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}


def delayAlert() {
    String now = new Date().format("MMMM d, yyyy hh:mm:ss a zzz (EEEE)")
    build(job: 'send_email',
				parameters: [
								[$class: 'StringParameterValue', name: 'TO', value: "CUSTOM LIST"],
								[$class: 'StringParameterValue', name: 'CUSTOM_RECIPIENTS', value: email_recipients],
								[$class: 'StringParameterValue', name: 'SUBJECT', value: "DELAY ALERT: ETLDemoTbl"],
								[$class: 'StringParameterValue', name: 'MESSAGE', value: """

										Delay in EP SQOOP job: ETL_TBL_STG.ETLDemoTbl hasn't been refreshed with today's data  ${now}
							
										EDW Master Data Team
							
										-------------------------------------------------------------------------
										This is an automated email generated by Jenkins, please do NOT reply.
										-------------------------------------------------------------------------
							
										"""],
								[$class: 'BooleanParameterValue', name: 'HIGH_PRIORITY', value: true]
							]
		)
}




    node {
        try {			
            stage name: 'sqoop_extractor_oracle'            
			waitTime = -60
            retry(retry_nbr) {
                waitTime += 60
                build job: 'sqoop_extractor', 
							parameters:[
											[$class: 'StringParameterValue', name: 'PROP_FILE', value: configFile],
											[$class: 'StringParameterValue', name: 'SQOOP_FILE', value: sqoopFile],
											[$class: 'StringParameterValue', name: 'KEYFILE_PATH', value: keyFilePath],											
											[$class: 'StringParameterValue', name: 'LCP_ENV', value: lcp],
											[$class: 'StringParameterValue', name: 'GIT_REPO', value: gitRepo],
											[$class: 'StringParameterValue', name: 'GIT_BRANCH', value: gitBranch]
										], 
							quietPeriod: waitTime
			}


            stage name: 'datafactory_service'
            waitTime = -60
            retry(retry_nbr) {
                waitTime += 60
                build job: 'datafactory_service', 
							parameters:[
											[$class: 'StringParameterValue', name: 'PROP_FILE', value: configFile],
											[$class: 'StringParameterValue', name: 'DATAFACTORY_FILE', value: dataFactoryFile],
											[$class: 'StringParameterValue', name: 'LCP_ENV', value: lcp],
											[$class: 'StringParameterValue', name: 'GIT_REPO', value: gitRepo],
											[$class: 'StringParameterValue', name: 'GIT_BRANCH', value: gitBranch]
										], 
							quietPeriod: waitTime
			}
				

            stage name: 'table_loader'
            waitTime = -60
            retry(retry_nbr) {
                waitTime += 60
                build job: 'table_loader', 
							parameters:[
											[$class: 'StringParameterValue', name: 'PROPERTIES_FILE', value: configFile],
											[$class: 'StringParameterValue', name: 'PROJECT_ID', value: projectId],
											[$class: 'StringParameterValue', name: 'SCHEMA', value: tableLoaderFile],
											[$class: 'StringParameterValue', name: 'DATASET', value: GCPdataset],											
											[$class: 'StringParameterValue', name: 'LCP_ENV', value: lcp],
											[$class: 'StringParameterValue', name: 'GIT_REPO', value: gitRepo],
											[$class: 'StringParameterValue', name: 'GIT_BRANCH', value: gitBranch]
										], 
							quietPeriod: waitTime
			}
        } 
		
		catch (e) {
            notifyFailed()
            currentBuild.result = "FAILED"
            throw e
        }
		
        finally {
            if (currentBuild.result == "FAILED") {
                delayAlert()
            }
        }
		
    }
